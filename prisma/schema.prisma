generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CaseStudy {
  id                 Int                 @id @default(autoincrement())
  title              String
  narrative          String
  challengeQuestion  String
  options            Json?
  correctOptionIndex Int?
  explanation        String
  createdAt          DateTime?           @default(now()) @db.Timestamp(6)
  companyName        String?
  ticker             String?             @db.VarChar(12)
  periodStart        DateTime?           @db.Timestamp(6)
  periodEnd          DateTime?           @db.Timestamp(6)
  shortSummary       String?
  fullNarrative      String?
  sources            Json?
  status             CaseStatus?         @default(DRAFT)
  refinedTitle       String?
  slug               String?             @unique @db.VarChar
  generationLogs     CaseGenerationLog[]
  quizQuestions      QuizQuestion[]
  progress           UserProgress[]
}

model UserProgress {
  id          Int       @id @default(autoincrement())
  userId      String
  caseStudyId Int
  completed   Boolean?  @default(false)
  score       Int?      @default(0)
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, caseStudyId])
}

model QuizQuestion {
  id                 Int       @id @default(autoincrement())
  caseStudyId        Int
  order              Int?      @default(0)
  prompt             String
  options            Json
  correctOptionIndex Int
  explanation        String
  createdAt          DateTime? @default(now()) @db.Timestamp(6)
  updatedAt          DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  category           String?   @db.VarChar(40)
  difficulty         String?   @db.VarChar(20)
  caseStudy          CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model CaseGenerationLog {
  id            Int        @id @default(autoincrement())
  caseStudyId   Int?
  phase         String
  inputPayload  Json?
  outputPayload Json?
  error         String?
  createdAt     DateTime?  @default(now()) @db.Timestamp(6)
  caseStudy     CaseStudy? @relation(fields: [caseStudyId], references: [id], onUpdate: NoAction)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @db.Timestamp(6)
  image         String?
  totalScore    Int?           @default(0)
  Account       Account[]
  Session       Session[]
  progress      UserProgress[]
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamp(6)
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
}

enum CaseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ================= IPO MODELS =================
model IPO {
  id               Int             @id @default(autoincrement())
  companyName      String          @unique
  logoUrl          String
  issueOpenDate    DateTime
  issueCloseDate   DateTime
  priceBandLower   Float
  priceBandUpper   Float
  lotSize          Int
  aboutCompany     String          @db.Text
  financialsJson   Json?
  strengths        String[]        @db.Text
  risks            String[]        @db.Text
  opinions         ExpertOpinion[]
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  updatedAt        DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  // Extended detailed sections (all optional JSON blocks)
  statsJson              Json?    // core labelled key/value stats
  reservationJson        Json?    // share reservation breakdown
  anchorDetailsJson      Json?    // anchor investors data
  timelineJson           Json?    // important dates
  lotSizeJson            Json?    // lot size tiers / applications
  financialsTableJson    Json?    // multi-period financial statement table
  kpiJson                Json?    // key performance indicators
  objectsOfIssueJson     Json?    // objects of the issue list
  subscriptionStatusJson Json?    // live subscription status snapshot
}

model ExpertOpinion {
  id                 Int        @id @default(autoincrement())
  ipoId              Int
  expertName         String
  expertImage        String?
  expertType         ExpertType
  registrationNumber String
  stance             Stance
  summary            String      @db.Text
  fullQuote          String      @db.Text
  ipo                IPO         @relation(fields: [ipoId], references: [id], onDelete: Cascade)
  createdAt          DateTime    @default(now()) @db.Timestamp(6)
}

enum ExpertType {
  BROKER
  INFLUENCER
}

enum Stance {
  APPLY
  AVOID
  NEUTRAL_APPLY_FOR_LISTING_GAINS
}
